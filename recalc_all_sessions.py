#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –í–°–ï–• —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π –≤ –ë–î
–í–ê–ñ–ù–û: –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç answers, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç points, isCorrect, score
"""

from pymongo import MongoClient
from bson import ObjectId
from datetime import datetime

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient('mongodb://gen_user:77tanufe@109.73.202.73:27017/default_db?authSource=admin&directConnection=true')
db = client.default_db

def normalize_text(value: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if value is None:
        return ""
    return str(value).strip().lower()

def score_single(selected_answer_id: str, question: dict) -> tuple[int, bool]:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    correct_ids = {a.get("id") for a in question.get("answers", []) if a.get("isCorrect")}
    is_correct = selected_answer_id in correct_ids
    points = int(question.get("points", 0)) if is_correct else 0
    return points, is_correct

def score_multiple(selected_answer_ids: list, question: dict) -> tuple[int, bool]:
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞:
    - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã –í–°–ï –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    - –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–æ –ù–ò –û–î–ù–û–ì–û –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    - –ò–Ω–∞—á–µ - 0 –±–∞–ª–ª–æ–≤
    """
    total_available = int(question.get("points", 0))
    selected_set = set(selected_answer_ids or [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    all_correct_ids = {a.get("id") for a in question.get("answers", []) if a.get("isCorrect")}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    all_incorrect_ids = {a.get("id") for a in question.get("answers", []) if not a.get("isCorrect")}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –í—ã–±—Ä–∞–Ω—ã –í–°–ï –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    all_correct_selected = selected_set.issuperset(all_correct_ids)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–ï –≤—ã–±—Ä–∞–Ω–æ –ù–ò –û–î–ù–û–ì–û –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    no_incorrect_selected = selected_set.isdisjoint(all_incorrect_ids)
    
    # –ï—Å–ª–∏ –æ–±–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –±–∞–ª–ª—ã
    if all_correct_selected and no_incorrect_selected:
        return total_available, True
    else:
        # –ò–Ω–∞—á–µ - 0 –±–∞–ª–ª–æ–≤
        return 0, False

def score_text(text_answer: str, question: dict) -> tuple[int, bool]:
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
    - –ë—É–∫–≤–∞ –≤ –±—É–∫–≤—É (—Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    - –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    """
    normalized = normalize_text(text_answer)
    correct_list = [
        normalize_text(val) for val in (question.get("correctAnswers") or [])
    ]
    is_correct = normalized in correct_list if correct_list else False
    points = int(question.get("points", 0)) if is_correct else 0
    return points, is_correct

def recalc_answer(existing_answer: dict, question: dict) -> dict:
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ"""
    a_type = existing_answer.get("type") or question.get("type")
    updated = dict(existing_answer)
    
    if a_type == "single":
        pts, ok = score_single(existing_answer.get("selectedAnswer"), question)
    elif a_type == "multiple":
        pts, ok = score_multiple(existing_answer.get("selectedAnswers", []), question)
    elif a_type == "text":
        pts, ok = score_text(existing_answer.get("textAnswer"), question)
    else:
        pts, ok = 0, False
    
    updated["type"] = a_type
    updated["points"] = int(pts)
    updated["isCorrect"] = bool(ok)
    return updated

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞"""
    print("=" * 80)
    print("–ê–ö–ö–£–†–ê–¢–ù–´–ô –ü–ï–†–ï–°–ß–ï–¢ –í–°–ï–• –¢–ï–°–¢-–°–ï–°–°–ò–ô")
    print("=" * 80)
    print("–í–ê–ñ–ù–û: –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç answers, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç points, isCorrect, score")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏
    print("\nüìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î...")
    sessions = list(db.test_sessions.find())
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(sessions)} —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π")
    
    if not sessions:
        print("‚ùå –¢–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüìã –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–µ—Å—Ç–∞–º...")
    test_ids = set(s.get("testId") for s in sessions)
    tests_cache = {}
    
    for test_id in test_ids:
        try:
            test = db.tests.find_one({"_id": ObjectId(test_id)})
            if test:
                test["_id"] = str(test["_id"])
                tests_cache[test_id] = test
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç {test_id}: {e}")
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tests_cache)} —Ç–µ—Å—Ç–æ–≤")
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
    print("\nüî¨ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏...")
    updated_count = 0
    skipped_count = 0
    
    for i, session in enumerate(sessions, 1):
        if i % 100 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(sessions)}...")
        
        test = tests_cache.get(session.get("testId"))
        
        if not test:
            skipped_count += 1
            continue
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = test.get("questions", [])
        question_by_id = {q.get("questionId"): q for q in questions}
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        answers = session.get("answers", [])
        new_answers = []
        
        total_points = 0
        for answer in answers:
            qid = answer.get("questionId")
            question = question_by_id.get(qid)
            
            if question:
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                recalculated = recalc_answer(answer, question)
                new_answers.append(recalculated)
                total_points += recalculated.get("points", 0)
            else:
                # –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–µ—Å—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å 0 –±–∞–ª–ª–æ–≤
                answer["points"] = 0
                answer["isCorrect"] = False
                new_answers.append(answer)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π –±–∞–ª–ª
        max_points = sum(int(q.get("points", 0)) for q in questions)
        if max_points > 0:
            new_score = round((total_points / max_points) * 100, 2)
        else:
            new_score = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é (–í–ê–ñ–ù–û: –ù–ï –∏–∑–º–µ–Ω—è–µ–º answers, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è)
        update_doc = {
            "answers": new_answers,
            "score": int(new_score),
        }
        
        result = db.test_sessions.update_one(
            {"_id": session["_id"]},
            {"$set": update_doc}
        )
        
        if result.modified_count:
            updated_count += 1
    
    print(f"\n‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: {updated_count}")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–µ—Å—Å–∏–π: {skipped_count}")
    
    # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    print("\nüîç –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã...")
    duplicates = db.test_sessions.aggregate([
        {
            "$group": {
                "_id": {"studentId": "$studentId", "testId": "$testId"},
                "count": {"$sum": 1},
                "sessionIds": {"$push": "$_id"}
            }
        },
        {"$match": {"count": {"$gt": 1}}}
    ])
    
    duplicate_count = 0
    deleted_count = 0
    
    for dup in duplicates:
        duplicate_count += 1
        session_ids = dup["sessionIds"]
        student_id = dup["_id"]["studentId"]
        test_id = dup["_id"]["testId"]
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
        sessions_to_check = list(db.test_sessions.find({"_id": {"$in": session_ids}}))
        sessions_sorted = sorted(sessions_to_check, key=lambda s: s.get("createdAt", ""))
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é —Å—Ç–∞—Ä—É—é)
        to_keep = sessions_sorted[0]
        to_delete = sessions_sorted[1:]
        
        print(f"\n   –î—É–±–ª–∏–∫–∞—Ç –¥–ª—è studentId={student_id}, testId={test_id}")
        print(f"   –û—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é: {to_keep['_id']} (created: {to_keep.get('createdAt')})")
        print(f"   –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–π: {len(to_delete)}")
        
        for s in to_delete:
            db.test_sessions.delete_one({"_id": s["_id"]})
            deleted_count += 1
            print(f"     –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {s['_id']} (created: {s.get('createdAt')})")
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_count}")
    print(f"   –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: {deleted_count}")
    
    print("\nüéâ –í–°–Å –ì–û–¢–û–í–û!")

if __name__ == "__main__":
    main()
