#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å —Ä–∞–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
"""

import asyncio
import aiohttp
import time
import statistics
import json
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import requests
from typing import List, Dict, Any
import argparse

class PerformanceTester:
    def __init__(self, base_url: str = "https://nickly24-cpm-exam-main-225a.twc1.net"):
        self.base_url = base_url.rstrip('/')
        self.results = []
        
    def test_endpoint(self, endpoint: str, method: str = "GET", data: Dict = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        url = f"{self.base_url}{endpoint}"
        start_time = time.time()
        
        try:
            if method == "GET":
                response = requests.get(url, timeout=30)
            elif method == "POST":
                response = requests.post(url, json=data, timeout=30)
            elif method == "PUT":
                response = requests.put(url, json=data, timeout=30)
            elif method == "DELETE":
                response = requests.delete(url, timeout=30)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
                
            end_time = time.time()
            response_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            result = {
                "endpoint": endpoint,
                "method": method,
                "status_code": response.status_code,
                "response_time_ms": response_time,
                "success": 200 <= response.status_code < 300,
                "timestamp": datetime.now().isoformat(),
                "response_size_bytes": len(response.content)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö
            if not result["success"]:
                result["error"] = response.text[:200]  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—à–∏–±–∫–∏
                
            return result
            
        except requests.exceptions.Timeout:
            return {
                "endpoint": endpoint,
                "method": method,
                "status_code": 0,
                "response_time_ms": 30000,  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                "success": False,
                "error": "Timeout (30s)",
                "timestamp": datetime.now().isoformat(),
                "response_size_bytes": 0
            }
        except Exception as e:
            return {
                "endpoint": endpoint,
                "method": method,
                "status_code": 0,
                "response_time_ms": 0,
                "success": False,
                "error": str(e),
                "timestamp": datetime.now().isoformat(),
                "response_size_bytes": 0
            }
    
    def test_single_load(self, concurrent_requests: int = 1, duration_seconds: int = 10) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏: {concurrent_requests} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration_seconds} —Å–µ–∫—É–Ω–¥")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        endpoints_to_test = [
            "/",
            "/directions", 
            "/tests/informatika",  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            "/tests/matematika",   # –ò —Ç–∞–∫–æ–µ —Ç–æ–∂–µ
        ]
        
        results = []
        start_time = time.time()
        end_time = start_time + duration_seconds
        
        with ThreadPoolExecutor(max_workers=concurrent_requests) as executor:
            futures = []
            
            while time.time() < end_time:
                for endpoint in endpoints_to_test:
                    future = executor.submit(self.test_endpoint, endpoint)
                    futures.append(future)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤
                    time.sleep(0.1)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in as_completed(futures):
                try:
                    result = future.result(timeout=35)  # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
                    results.append(result)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        
        return self.analyze_results(results, concurrent_requests, duration_seconds)
    
    def test_gradual_load(self, max_concurrent: int = 50, step: int = 5) -> List[Dict[str, Any]]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â—É—é—Å—è –Ω–∞–≥—Ä—É–∑–∫—É"""
        print(f"\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –æ—Ç 1 –¥–æ {max_concurrent} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        all_results = []
        
        for concurrent in range(1, max_concurrent + 1, step):
            print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {concurrent} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ ---")
            result = self.test_single_load(concurrent, duration_seconds=5)
            result["concurrent_requests"] = concurrent
            all_results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            time.sleep(2)
        
        return all_results
    
    def test_burst_load(self, burst_size: int = 100, duration_seconds: int = 5) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É (burst)"""
        print(f"\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏: {burst_size} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {duration_seconds} —Å–µ–∫—É–Ω–¥")
        
        endpoints = ["/", "/directions", "/tests/informatika"]
        results = []
        
        with ThreadPoolExecutor(max_workers=burst_size) as executor:
            futures = []
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            for i in range(burst_size):
                endpoint = endpoints[i % len(endpoints)]
                future = executor.submit(self.test_endpoint, endpoint)
                futures.append(future)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in as_completed(futures):
                try:
                    result = future.result(timeout=35)
                    results.append(result)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        
        return self.analyze_results(results, burst_size, duration_seconds)
    
    def analyze_results(self, results: List[Dict], concurrent_requests: int, duration: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not results:
            return {"error": "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        successful_requests = [r for r in results if r["success"]]
        failed_requests = [r for r in results if not r["success"]]
        
        response_times = [r["response_time_ms"] for r in successful_requests]
        
        analysis = {
            "concurrent_requests": concurrent_requests,
            "test_duration_seconds": duration,
            "total_requests": len(results),
            "successful_requests": len(successful_requests),
            "failed_requests": len(failed_requests),
            "success_rate_percent": (len(successful_requests) / len(results)) * 100 if results else 0,
            "requests_per_second": len(results) / duration if duration > 0 else 0,
        }
        
        if response_times:
            analysis.update({
                "avg_response_time_ms": statistics.mean(response_times),
                "min_response_time_ms": min(response_times),
                "max_response_time_ms": max(response_times),
                "median_response_time_ms": statistics.median(response_times),
                "p95_response_time_ms": self.percentile(response_times, 95),
                "p99_response_time_ms": self.percentile(response_times, 99),
            })
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫
        error_summary = {}
        for req in failed_requests:
            error_type = req.get("error", "Unknown error")
            if error_type in error_summary:
                error_summary[error_type] += 1
            else:
                error_summary[error_type] = 1
        
        analysis["error_summary"] = error_summary
        
        return analysis
    
    def percentile(self, data: List[float], percentile: float) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å"""
        if not data:
            return 0
        sorted_data = sorted(data)
        index = (percentile / 100) * (len(sorted_data) - 1)
        if index.is_integer():
            return sorted_data[int(index)]
        else:
            lower = sorted_data[int(index)]
            upper = sorted_data[int(index) + 1]
            return lower + (upper - lower) * (index - int(index))
    
    def print_results(self, results: Dict[str, Any]):
        """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*60)
        
        print(f"\nüîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:")
        print(f"   ‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {results.get('concurrent_requests', 'N/A')}")
        print(f"   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {results.get('test_duration_seconds', 'N/A')} —Å–µ–∫")
        
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {results.get('total_requests', 0)}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {results.get('successful_requests', 0)}")
        print(f"   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {results.get('failed_requests', 0)}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {results.get('success_rate_percent', 0):.1f}%")
        print(f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {results.get('requests_per_second', 0):.1f}")
        
        if 'avg_response_time_ms' in results:
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {results['avg_response_time_ms']:.1f} –º—Å")
            print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {results['min_response_time_ms']:.1f} –º—Å")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {results['max_response_time_ms']:.1f} –º—Å")
            print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {results['median_response_time_ms']:.1f} –º—Å")
            print(f"   ‚Ä¢ 95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {results['p95_response_time_ms']:.1f} –º—Å")
            print(f"   ‚Ä¢ 99-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {results['p99_response_time_ms']:.1f} –º—Å")
        
        if results.get('error_summary'):
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for error, count in results['error_summary'].items():
                print(f"   ‚Ä¢ {error}: {count}")
        
        print("="*60)
    
    def save_results_to_file(self, results: List[Dict], filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"performance_test_results_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


def main():
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--url', default='https://nickly24-cpm-exam-main-225a.twc1.net', 
                       help='–ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--mode', choices=['single', 'gradual', 'burst', 'all'], default='all',
                       help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--concurrent', type=int, default=10,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è single —Ä–µ–∂–∏–º–∞)')
    parser.add_argument('--duration', type=int, default=10,
                       help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--max-concurrent', type=int, default=50,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è gradual —Ä–µ–∂–∏–º–∞)')
    parser.add_argument('--burst-size', type=int, default=100,
                       help='–†–∞–∑–º–µ—Ä –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è burst —Ä–µ–∂–∏–º–∞)')
    parser.add_argument('--save', action='store_true',
                       help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞")
    print(f"üåê URL: {args.url}")
    
    tester = PerformanceTester(args.url)
    all_results = []
    
    try:
        if args.mode in ['single', 'all']:
            print("\n" + "="*50)
            print("üîç –¢–ï–°–¢ 1: –û–¥–∏–Ω–æ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
            print("="*50)
            result = tester.test_single_load(args.concurrent, args.duration)
            tester.print_results(result)
            all_results.append({"test_type": "single_load", "result": result})
        
        if args.mode in ['gradual', 'all']:
            print("\n" + "="*50)
            print("üìà –¢–ï–°–¢ 2: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –Ω–∞–≥—Ä—É–∑–∫–∞")
            print("="*50)
            gradual_results = tester.test_gradual_load(args.max_concurrent, step=5)
            for result in gradual_results:
                tester.print_results(result)
            all_results.append({"test_type": "gradual_load", "results": gradual_results})
        
        if args.mode in ['burst', 'all']:
            print("\n" + "="*50)
            print("üí• –¢–ï–°–¢ 3: –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
            print("="*50)
            burst_result = tester.test_burst_load(args.burst_size, 5)
            tester.print_results(burst_result)
            all_results.append({"test_type": "burst_load", "result": burst_result})
        
        if args.save:
            tester.save_results_to_file(all_results)
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


if __name__ == "__main__":
    main()
